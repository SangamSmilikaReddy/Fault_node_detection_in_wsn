{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8186600,"sourceType":"datasetVersion","datasetId":4847575},{"sourceId":8322207,"sourceType":"datasetVersion","datasetId":4943620}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ananyakannan/fault-detection-in-wsn?scriptVersionId=184567908\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-20T13:53:43.381151Z","iopub.execute_input":"2024-06-20T13:53:43.382035Z","iopub.status.idle":"2024-06-20T13:53:43.395759Z","shell.execute_reply.started":"2024-06-20T13:53:43.382003Z","shell.execute_reply":"2024-06-20T13:53:43.394939Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/wsn-data/WsnData (1).csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/wsn-data/WsnData (1).csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-20T13:53:49.251509Z","iopub.execute_input":"2024-06-20T13:53:49.252155Z","iopub.status.idle":"2024-06-20T13:53:49.316677Z","shell.execute_reply.started":"2024-06-20T13:53:49.252123Z","shell.execute_reply":"2024-06-20T13:53:49.31577Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T13:53:53.664336Z","iopub.execute_input":"2024-06-20T13:53:53.665296Z","iopub.status.idle":"2024-06-20T13:53:53.696148Z","shell.execute_reply.started":"2024-06-20T13:53:53.66526Z","shell.execute_reply":"2024-06-20T13:53:53.695279Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   SensorID             Timestamp   SensorType          X          Y  \\\n0         1  18-Apr-2024 22:41:44  Temperature  32.300556  21.575965   \n1         2  18-Apr-2024 22:41:45     Humidity  61.588405  96.030429   \n2         3  18-Apr-2024 22:41:46     Pressure  17.543522  75.573323   \n3         4  18-Apr-2024 22:41:47  Temperature  75.932405  92.519359   \n4         5  18-Apr-2024 22:41:48     Humidity  13.461775  14.773697   \n\n   SensorData  BatteryLife  Temperature  IsFaulty  \n0   51.396271    73.533551    53.793287         0  \n1   15.024628    73.435270    50.867584         0  \n2   62.117307    73.372619    49.905307         0  \n3   75.547331    73.281948    49.990236         0  \n4   20.536293    73.227014    48.288018         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SensorID</th>\n      <th>Timestamp</th>\n      <th>SensorType</th>\n      <th>X</th>\n      <th>Y</th>\n      <th>SensorData</th>\n      <th>BatteryLife</th>\n      <th>Temperature</th>\n      <th>IsFaulty</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>18-Apr-2024 22:41:44</td>\n      <td>Temperature</td>\n      <td>32.300556</td>\n      <td>21.575965</td>\n      <td>51.396271</td>\n      <td>73.533551</td>\n      <td>53.793287</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>18-Apr-2024 22:41:45</td>\n      <td>Humidity</td>\n      <td>61.588405</td>\n      <td>96.030429</td>\n      <td>15.024628</td>\n      <td>73.435270</td>\n      <td>50.867584</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>18-Apr-2024 22:41:46</td>\n      <td>Pressure</td>\n      <td>17.543522</td>\n      <td>75.573323</td>\n      <td>62.117307</td>\n      <td>73.372619</td>\n      <td>49.905307</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>18-Apr-2024 22:41:47</td>\n      <td>Temperature</td>\n      <td>75.932405</td>\n      <td>92.519359</td>\n      <td>75.547331</td>\n      <td>73.281948</td>\n      <td>49.990236</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>18-Apr-2024 22:41:48</td>\n      <td>Humidity</td>\n      <td>13.461775</td>\n      <td>14.773697</td>\n      <td>20.536293</td>\n      <td>73.227014</td>\n      <td>48.288018</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data=df.drop('X',axis=1)\ndata=data.drop('Y',axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-20T13:53:56.776355Z","iopub.execute_input":"2024-06-20T13:53:56.777227Z","iopub.status.idle":"2024-06-20T13:53:56.792321Z","shell.execute_reply.started":"2024-06-20T13:53:56.777193Z","shell.execute_reply":"2024-06-20T13:53:56.791496Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"data = data.sample(frac=1)\ndata = data[:9000]","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:35:25.393275Z","iopub.execute_input":"2024-06-20T14:35:25.393622Z","iopub.status.idle":"2024-06-20T14:35:25.39904Z","shell.execute_reply.started":"2024-06-20T14:35:25.393592Z","shell.execute_reply":"2024-06-20T14:35:25.398062Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:34:13.947004Z","iopub.execute_input":"2024-06-20T14:34:13.947797Z","iopub.status.idle":"2024-06-20T14:34:13.959921Z","shell.execute_reply.started":"2024-06-20T14:34:13.947758Z","shell.execute_reply":"2024-06-20T14:34:13.958917Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"      SensorID             Timestamp   SensorType  SensorData  BatteryLife  \\\n5949        50  18-Apr-2024 22:42:33     Humidity   57.586650    83.157738   \n7062        63  18-Apr-2024 22:42:46     Pressure   57.677630    23.643400   \n8961        62  18-Apr-2024 22:42:45     Humidity   93.335669    60.911937   \n3018        19  18-Apr-2024 22:42:02  Temperature   59.444964    73.628738   \n1519        20  18-Apr-2024 22:42:03     Humidity   98.563372    16.907616   \n\n      Temperature  IsFaulty  \n5949    31.520737         0  \n7062    15.414169         0  \n8961    49.865892         0  \n3018    51.005327         0  \n1519    33.576771         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SensorID</th>\n      <th>Timestamp</th>\n      <th>SensorType</th>\n      <th>SensorData</th>\n      <th>BatteryLife</th>\n      <th>Temperature</th>\n      <th>IsFaulty</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5949</th>\n      <td>50</td>\n      <td>18-Apr-2024 22:42:33</td>\n      <td>Humidity</td>\n      <td>57.586650</td>\n      <td>83.157738</td>\n      <td>31.520737</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7062</th>\n      <td>63</td>\n      <td>18-Apr-2024 22:42:46</td>\n      <td>Pressure</td>\n      <td>57.677630</td>\n      <td>23.643400</td>\n      <td>15.414169</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8961</th>\n      <td>62</td>\n      <td>18-Apr-2024 22:42:45</td>\n      <td>Humidity</td>\n      <td>93.335669</td>\n      <td>60.911937</td>\n      <td>49.865892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3018</th>\n      <td>19</td>\n      <td>18-Apr-2024 22:42:02</td>\n      <td>Temperature</td>\n      <td>59.444964</td>\n      <td>73.628738</td>\n      <td>51.005327</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1519</th>\n      <td>20</td>\n      <td>18-Apr-2024 22:42:03</td>\n      <td>Humidity</td>\n      <td>98.563372</td>\n      <td>16.907616</td>\n      <td>33.576771</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score\nfrom collections import defaultdict\n\n# Define the environment class\nclass SensorEnvironment:\n    def __init__(self, data):\n        self.data = data\n        self.current_step = 0\n        self.max_steps = len(data)\n    \n    def reset(self):\n        self.current_step = 0\n        \n    def step(self, action):\n        # Execute the action\n        is_faulty = self.data.iloc[self.current_step]['IsFaulty']\n        reward = 1 if action == is_faulty else -10\n        self.current_step += 1\n        done = self.current_step >= self.max_steps\n        next_state = self.data.iloc[self.current_step] if not done else None\n        return tuple(next_state) if next_state is not None else None, reward, done\n\n\n# Define the Q-learning agent\nclass QLearningAgent:\n    def __init__(self, state_size, action_size, learning_rate=0.1, discount_factor=0.9, epsilon=0.1):\n        self.q_table = defaultdict(lambda: np.zeros(action_size))\n        self.learning_rate = learning_rate\n        self.discount_factor = discount_factor\n        self.epsilon = epsilon\n        self.action_size = action_size\n        \n    def choose_action(self, state):\n        if np.random.rand() < self.epsilon:\n            return np.random.choice(self.action_size)\n        else:\n            return np.argmax(self.q_table[state])\n    \n    def update(self, state, action, reward, next_state):\n        if next_state is None:\n            td_target = reward\n        else:\n            td_target = reward + self.discount_factor * np.max(self.q_table[next_state])\n        td_error = td_target - self.q_table[state][action]\n        self.q_table[state][action] += self.learning_rate * td_error\n        \n    def train(self, env, episodes):\n        for episode in range(episodes):\n            state = tuple(env.data.iloc[episode])\n            env.reset()\n            done = False\n            while not done:\n                action = self.choose_action(state)\n                next_state, reward, done = env.step(action)\n                self.update(state, action, reward, next_state)\n                state = next_state\n\n                \n# Load data\n'''data = pd.DataFrame({\n    'SensorID': [5, 21, 94, 65, 43],\n    'Timestamp': ['18-Apr-2024 22:41:48', '18-Apr-2024 22:42:04', '18-Apr-2024 22:43:17', '18-Apr-2024 22:42:48', '18-Apr-2024 22:42:26'],\n    'SensorType': ['Humidity', 'Pressure', 'Temperature', 'Humidity', 'Temperature'],\n    'SensorData': [73.207590, 69.166445, 11.986395, -0.342599, -7.688521],\n    'BatteryLife': [2.680539, 33.300421, 68.603829, 67.178232, 3.935005],\n    'Temperature': [28.004203, 54.250349, 51.754191, 0.515658, 43.608114],\n    'IsFaulty': [1, 0, 0, 1, 1]\n})'''\n\n# Initialize environment and agent\ntrain_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\ntrain_env = SensorEnvironment(train_data)\nagent = QLearningAgent(state_size=len(data.columns) - 1, action_size=2)  # Excluding the 'IsFaulty' column\n\n# Train the agent\nagent.train(train_env, episodes=len(train_data))\n\n# Extract and print the Q-table\nprint(\"Q-table:\")\nfor state, action_values in agent.q_table.items():\n    print(\"State:\", state)\n    print(\"Action values:\", action_values)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:35:29.705603Z","iopub.execute_input":"2024-06-20T14:35:29.706308Z","iopub.status.idle":"2024-06-20T14:35:30.805541Z","shell.execute_reply.started":"2024-06-20T14:35:29.706274Z","shell.execute_reply":"2024-06-20T14:35:30.804572Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Q-table:\nState: (47, '18-Apr-2024 22:42:30', 'Humidity', 10.0892654380406, 87.6432781586368, 61.6412772094911, 0)\nAction values: [0.1 0. ]\nState: (40, '18-Apr-2024 22:42:23', 'Temperature', 51.816191778754, 47.3490626852544, 21.3167860317527, 0)\nAction values: [5.34245288 0.        ]\nState: (30, '18-Apr-2024 22:42:13', 'Pressure', 31.920657005502, 22.2306357462755, 33.746527031191, 0)\nAction values: [ 5.31435399 -2.38097914]\nState: (43, '18-Apr-2024 22:42:26', 'Temperature', 72.434271470667, 50.9450485827742, 40.0731190773889, 0)\nAction values: [ 5.27780007 -2.11945158]\nState: (20, '18-Apr-2024 22:42:03', 'Humidity', 33.4704151289313, 31.2741623057845, 27.435644117013, 0)\nAction values: [ 5.21842834 -1.75143295]\nState: (76, '18-Apr-2024 22:42:59', 'Temperature', 64.1218990813286, 35.1638609220877, 38.7537212843712, 0)\nAction values: [ 5.13566108 -1.83320728]\nState: (60, '18-Apr-2024 22:42:43', 'Pressure', 26.3550604948916, 67.4653137979921, -3.61965980848201, 1)\nAction values: [-2.73846131  5.10406255]\nState: (19, '18-Apr-2024 22:42:02', 'Temperature', 59.4449643644962, 73.6287384803419, 51.0053268763265, 0)\nAction values: [ 5.05525473 -1.71377629]\nState: (34, '18-Apr-2024 22:42:17', 'Temperature', 5.20996648964676, 32.4032907309451, 53.9405067525618, 0)\nAction values: [ 5.13181414 -3.62097094]\nState: (50, '18-Apr-2024 22:42:33', 'Humidity', 57.5866503590912, 83.1577375585237, 31.5207370519983, 0)\nAction values: [ 5.17426163 -1.22793096]\nState: (27, '18-Apr-2024 22:42:10', 'Pressure', 14.601410896784, 67.1096563470606, 18.2250719189217, 0)\nAction values: [ 5.23597431 -1.34312058]\nState: (41, '18-Apr-2024 22:42:24', 'Humidity', 10.0357881039328, 8.47285083991527, 29.7591783496529, 1)\nAction values: [-3.24273619  5.29362824]\nState: (11, '18-Apr-2024 22:41:54', 'Humidity', -2.57211297200263, 13.6282329468993, 39.6327442813387, 1)\nAction values: [-3.29363323  5.35187826]\nState: (7, '18-Apr-2024 22:41:50', 'Temperature', 79.1685748836112, 32.3835791460931, 46.6176068760954, 0)\nAction values: [ 5.39341891 -0.8667748 ]\nState: (46, '18-Apr-2024 22:42:29', 'Temperature', 76.4198307755025, 13.8389347050467, 36.6691196198318, 1)\nAction values: [-3.51078072  5.40270089]\nState: (27, '18-Apr-2024 22:42:10', 'Pressure', 49.0458511437782, 86.9674005728186, 47.7439607636954, 0)\nAction values: [ 5.39389882 -2.64401773]\nState: (10, '18-Apr-2024 22:41:53', 'Temperature', 17.9338585483892, 6.4417944759242, 60.6434866089275, 1)\nAction values: [-2.23450663  5.37112758]\nState: (17, '18-Apr-2024 22:42:00', 'Humidity', 19.4351150390099, 49.2857923071321, 37.1858079949183, 0)\nAction values: [ 5.3232781  -0.63287819]\nState: (61, '18-Apr-2024 22:42:44', 'Temperature', 9.68988674175854, 89.1513938769767, 47.6596552805785, 0)\nAction values: [ 5.25369599 -1.37959203]\nState: (50, '18-Apr-2024 22:42:33', 'Humidity', 20.8253571327926, 65.881138955893, 21.2543508895433, 0)\nAction values: [ 5.18069499 -3.03991368]\nState: (3, '18-Apr-2024 22:41:46', 'Pressure', 57.0419069551463, 49.399577761547, 31.6718975454016, 0)\nAction values: [ 5.13069266 -2.04901807]\nState: (16, '18-Apr-2024 22:41:59', 'Temperature', 61.113253849604, 23.6777486173846, 45.7712840880797, 0)\nAction values: [ 5.06789851 -2.81202196]\nState: (76, '18-Apr-2024 22:42:59', 'Temperature', 31.4122347946334, 30.2996464409081, 45.8630378082278, 0)\nAction values: [ 5.15824553 -1.95639571]\nState: (69, '18-Apr-2024 22:42:52', 'Pressure', 36.5195890690203, 6.87036824296901, 72.9634673845245, 1)\nAction values: [-2.82524091  5.20171198]\nState: (90, '18-Apr-2024 22:43:13', 'Pressure', 6.38572666945806, 59.6047155571763, 12.4518404051395, 0)\nAction values: [ 5.22878071 -0.70791842]\nState: (63, '18-Apr-2024 22:42:46', 'Pressure', 57.6776304067082, 23.6433996638025, 15.4141692825629, 0)\nAction values: [ 5.2538823  -1.47578401]\nState: (9, '18-Apr-2024 22:41:52', 'Pressure', 90.3120633022379, 6.44803528874221, 60.102368793726, 1)\nAction values: [-4.38548303  5.28525555]\nState: (51, '18-Apr-2024 22:42:34', 'Pressure', 79.1915126925912, 57.5107935032419, 51.2954238822306, 0)\nAction values: [ 5.33520672 -2.82592332]\nState: (94, '18-Apr-2024 22:43:17', 'Temperature', 37.3875829379836, 63.6321580935775, 1.53094941278277, 1)\nAction values: [-1.56959324  5.32813398]\nState: (70, '18-Apr-2024 22:42:53', 'Temperature', 26.3246042506497, 22.4258899239572, 28.9463328488991, 0)\nAction values: [ 5.26878008 -3.80406526]\nState: (38, '18-Apr-2024 22:42:21', 'Humidity', 99.5031337886138, 66.4028591553526, 15.7803547259056, 0)\nAction values: [ 5.24648636 -2.0037076 ]\nState: (31, '18-Apr-2024 22:42:14', 'Temperature', 6.52125455243773, 64.6499219945695, 47.2484958482465, 0)\nAction values: [ 5.2123585  -2.85963351]\nState: (24, '18-Apr-2024 22:42:07', 'Pressure', 89.0177486293954, 36.2189156762973, 58.1587059846205, 0)\nAction values: [ 5.19665663 -1.3075753 ]\nState: (21, '18-Apr-2024 22:42:04', 'Pressure', 92.2798879826776, 94.6217602481882, 32.7747432685822, 0)\nAction values: [ 5.1804051 -1.0821178]\nState: (17, '18-Apr-2024 22:42:00', 'Humidity', -18.0864632176064, 5.23098265060817, 37.8159058371258, 1)\nAction values: [-2.58353735  5.22761175]\nState: (17, '18-Apr-2024 22:42:00', 'Humidity', 4.95276047250256, 20.35476454121, 34.0371417653862, 0)\nAction values: [ 5.25014072 -2.47222244]\nState: (17, '18-Apr-2024 22:42:00', 'Humidity', 95.0736463366707, 34.7915851502727, 48.6915911840059, 0)\nAction values: [ 5.35137148 -1.42427889]\nState: (84, '18-Apr-2024 22:43:07', 'Pressure', 61.5402119769495, 11.9735776246871, 47.0296502468398, 1)\nAction values: [-2.91442208  5.32627284]\nState: (18, '18-Apr-2024 22:42:01', 'Pressure', 68.8307656918142, 65.2243810721642, 43.5034638285129, 0)\nAction values: [ 5.32527163 -2.94319152]\nState: (4, '18-Apr-2024 22:41:47', 'Temperature', 55.4370836008748, 32.5697438490969, 47.7219703114178, 0)\nAction values: [ 5.28400551 -1.09792186]\nState: (96, '18-Apr-2024 22:43:19', 'Pressure', 39.1112942365806, 93.0836711129085, 28.1372771977268, 0)\nAction values: [ 5.25252684 -1.93285667]\nState: (75, '18-Apr-2024 22:42:58', 'Pressure', 80.3236033825969, 29.5468680027268, 53.3597039210369, 0)\nAction values: [ 5.21493132 -2.05290868]\nState: (19, '18-Apr-2024 22:42:02', 'Temperature', 73.7184627984072, 21.4042203060915, 46.351849554483, 0)\nAction values: [ 5.18550631 -1.41623077]\nState: (22, '18-Apr-2024 22:42:05', 'Temperature', 71.4853405424298, 15.6071120828923, 29.9691557370926, 0)\nAction values: [ 5.28156162 -3.97771378]\nState: (94, '18-Apr-2024 22:43:17', 'Temperature', 76.5787212411632, 0.822349849229202, 85.1740932576953, 1)\nAction values: [-3.1448948   5.31308483]\nState: (70, '18-Apr-2024 22:42:53', 'Temperature', 59.09864811831, 60.5467402269575, 23.7884584818968, 0)\nAction values: [ 5.2476462  -1.91126711]\nState: (16, '18-Apr-2024 22:41:59', 'Temperature', 34.4730577883735, 96.9672305801242, 40.688980294232, 0)\nAction values: [ 5.17006041 -4.17413061]\nState: (72, '18-Apr-2024 22:42:55', 'Pressure', 33.0880499002489, 86.1568102359081, 52.2749020607024, 0)\nAction values: [ 5.03272266 -2.3808772 ]\nState: (1, '18-Apr-2024 22:41:44', 'Temperature', 4.13592687957993, 18.7040195483496, 35.0043599894292, 0)\nAction values: [ 4.82612329 -1.93227536]\nState: (53, '18-Apr-2024 22:42:36', 'Humidity', 50.7934983665688, 15.6964417784339, 47.0704765014709, 0)\nAction values: [ 4.74839596 -3.85028626]\nState: (70, '18-Apr-2024 22:42:53', 'Temperature', 82.3563781890192, 1.8496864327167, 87.9585751538853, 1)\nAction values: [-3.39060012  4.73972306]\nState: (90, '18-Apr-2024 22:43:13', 'Pressure', 61.422239723439, 43.0881169095659, 62.9636315002799, 1)\nAction values: [-2.20256489  4.97196048]\nState: (52, '18-Apr-2024 22:42:35', 'Temperature', 45.5568314795059, 14.077083534566, 34.4381170226116, 1)\nAction values: [-2.79109285  5.10408195]\nState: (42, '18-Apr-2024 22:42:25', 'Pressure', 71.878342291979, 13.924483947015, 53.1140836717418, 1)\nAction values: [-1.99362576  5.23066312]\nState: (57, '18-Apr-2024 22:42:40', 'Pressure', 46.6815511370345, 86.7645140593155, 41.7693969593921, 0)\nAction values: [ 5.21565689 -2.49240484]\nState: (81, '18-Apr-2024 22:43:04', 'Pressure', 36.7187954362091, 85.6244813526372, 33.2550034552554, 0)\nAction values: [ 5.09113102 -2.43941831]\nState: (39, '18-Apr-2024 22:42:22', 'Pressure', 30.6758540409609, 68.5010711734261, 36.9317663678202, 0)\nAction values: [ 4.97382984 -2.29445511]\nState: (97, '18-Apr-2024 22:43:20', 'Temperature', 63.1191951934649, 89.0074743745167, 18.1587926715174, 1)\nAction values: [-2.46962857  5.09167214]\nState: (29, '18-Apr-2024 22:42:12', 'Humidity', 66.3033212108509, 82.0960090014276, 63.9322051430173, 0)\nAction values: [ 5.04568054 -2.46472732]\nState: (20, '18-Apr-2024 22:42:03', 'Humidity', 98.5633717755555, 16.9076162185851, 33.5767712982612, 0)\nAction values: [ 4.91980352 -2.36907842]\nState: (5, '18-Apr-2024 22:41:48', 'Humidity', -3.0132060143882, 13.8693303245425, 38.7419867658, 1)\nAction values: [-3.25280628  4.99457835]\nState: (76, '18-Apr-2024 22:42:59', 'Temperature', 66.6496491682823, 3.58052634598601, 77.5534957426186, 1)\nAction values: [-2.883183    5.17426097]\nState: (28, '18-Apr-2024 22:42:11', 'Temperature', 83.7644694979807, 77.0552843929136, 62.9181334345088, 0)\nAction values: [ 5.36651924 -2.38978959]\nState: (86, '18-Apr-2024 22:43:09', 'Humidity', 18.1967503994713, 34.738719210264, 41.9678559513107, 0)\nAction values: [ 5.40148902 -2.23049206]\nState: (56, '18-Apr-2024 22:42:39', 'Humidity', 23.924048507991, 82.5125721833633, 62.6703027857334, 0)\nAction values: [ 5.38658129 -0.6628734 ]\nState: (65, '18-Apr-2024 22:42:48', 'Humidity', 79.3643140659155, 45.7639075446251, 63.1333355706492, 0)\nAction values: [ 5.31408871 -1.61170821]\nState: (17, '18-Apr-2024 22:42:00', 'Humidity', 41.3789635481102, 73.7637088953698, 54.5003913451499, 0)\nAction values: [5.34172617 0.        ]\nState: (94, '18-Apr-2024 22:43:17', 'Temperature', 6.89029799263716, 79.9618967460305, 19.6428569636221, 0)\nAction values: [ 5.32323823 -2.16773786]\nState: (26, '18-Apr-2024 22:42:09', 'Humidity', 58.3778238802947, 77.1421771867311, 64.0668905639086, 0)\nAction values: [ 5.26758644 -3.28909991]\nState: (79, '18-Apr-2024 22:43:02', 'Temperature', 68.457593022469, 24.2943630250249, 80.2091427400448, 1)\nAction values: [-3.11752008  5.34033236]\nState: (48, '18-Apr-2024 22:42:31', 'Pressure', 51.7075863503654, 85.8679059965711, 38.562624164854, 0)\nAction values: [ 5.32785673 -2.86157908]\nState: (16, '18-Apr-2024 22:41:59', 'Temperature', 10.0655636989467, 30.0698728801386, 55.5906633837941, 0)\nAction values: [ 5.24741734 -2.15461856]\nState: (50, '18-Apr-2024 22:42:33', 'Humidity', 44.1969206422778, 93.5879012304498, 27.6729539757907, 0)\nAction values: [ 5.017604  -2.6769893]\nState: (53, '18-Apr-2024 22:42:36', 'Humidity', 35.0785115853729, 59.8136414096107, 67.3157393906382, 0)\nAction values: [ 4.45386877 -3.93569646]\nState: (53, '18-Apr-2024 22:42:36', 'Humidity', 41.1105570419219, 14.000827033994, 34.7499040583502, 1)\nAction values: [-3.01009149  3.54712603]\nState: (48, '18-Apr-2024 22:42:31', 'Pressure', 56.3752240322386, 0.532779991069511, 54.155703954235, 1)\nAction values: [-2.78481588  3.47927688]\nState: (14, '18-Apr-2024 22:41:57', 'Humidity', 55.2062734935906, 31.888319748153, 52.6205012235068, 0)\nAction values: [ 3.60614255 -4.50152412]\nState: (88, '18-Apr-2024 22:43:11', 'Temperature', 39.6451006203877, 31.1461837799983, 44.0736506781674, 0)\nAction values: [ 2.97720215 -2.97708334]\nState: (58, '18-Apr-2024 22:42:41', 'Temperature', 98.6800066853014, 89.367167837758, 28.2072120368859, 0)\nAction values: [ 2.25049011 -1.72991016]\nState: (29, '18-Apr-2024 22:42:12', 'Humidity', 4.90857720631457, 65.1915340173321, 46.0671910134076, 0)\nAction values: [ 1.42886244 -2.71      ]\n","output_type":"stream"}]},{"cell_type":"code","source":"import gym\nfrom gym import spaces\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, precision_score\n\nclass SensorEnv(gym.Env):\n    def __init__(self, data):\n        super(SensorEnv, self).__init__()\n        self.data = data\n        self.action_space = spaces.Discrete(2)  # 0: normal, 1: faulty\n        self.observation_space = spaces.Box(low=0, high=1, shape=(len(data.columns)-1,), dtype=np.float32)\n        self.current_step = 0\n        self.max_steps = len(data)\n        self.reset()\n\n    def reset(self):\n        self.current_step = 0\n        self.state = self.data.iloc[self.current_step, :-1].values\n        return self.state\n\n    def step(self, action):\n        self.current_step += 1\n        done = self.current_step >= self.max_steps\n        if action == self.data.iloc[self.current_step - 1]['IsFaulty']:\n            reward = 1  # Correct prediction\n        else:\n            reward = -10  # Incorrect prediction\n        next_state = self.data.iloc[self.current_step, :-1].values\n        return next_state, reward, done, {}\n\n    def render(self, mode='human'):\n        pass\n\n    def close(self):\n        pass\n\n# Create the environment\nenv = SensorEnv(data)\n\n# Train/test split\ntrain_data = data.iloc[:int(0.8 * len(data))]\ntest_data = data.iloc[int(0.8 * len(data)):]\n\n# Train\ntrain_rewards = []\nobservation = env.reset()\ntotal_reward = 0\nfor _ in range(len(train_data)):\n    action = env.action_space.sample()  # Random action for demonstration\n    observation, reward, done, info = env.step(action)\n    total_reward += reward\n    train_rewards.append(total_reward)\n    if done:\n        break\nprint(\"Total reward on train data:\", total_reward)\n\n# Test\ntest_rewards = []\nobservation = env.reset()\ntotal_reward = 0\nfor _ in range(len(test_data)):\n    action = env.action_space.sample()  # Random action for demonstration\n    observation, reward, done, info = env.step(action)\n    total_reward += reward\n    test_rewards.append(total_reward)\n    if done:\n        break\n        \nprint(\"Total reward on test data:\", total_reward)\n\n# Performance metrics\naccuracy = total_reward / len(test_data)\nprint(\"Accuracy:\", accuracy)\n\n# Plotting\nplt.plot(range(len(train_rewards)), train_rewards, label='Training')\nplt.plot(range(len(test_rewards)), test_rewards, label='Testing')\nplt.xlabel('Time Step')\nplt.ylabel('Cumulative Reward')\nplt.title('Training and Testing Performance')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:35:37.956733Z","iopub.execute_input":"2024-06-20T14:35:37.95711Z","iopub.status.idle":"2024-06-20T14:35:38.24003Z","shell.execute_reply.started":"2024-06-20T14:35:37.957081Z","shell.execute_reply":"2024-06-20T14:35:38.239212Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Total reward on train data: -393\nTotal reward on test data: -101\nAccuracy: -5.05\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n# Define the environment class\nclass SensorEnvironment:\n    def __init__(self, data):\n        self.data = data\n        self.state = None\n        self.current_step = 0\n        self.max_steps = len(data)\n    \n    def reset(self):\n        self.current_step = 0\n        \n    def step(self, action):\n        # Execute the action\n        is_faulty = self.data.iloc[self.current_step]['IsFaulty']\n        reward = 1 if action == is_faulty else -10\n        self.current_step += 1\n        done = self.current_step >= self.max_steps\n        next_state = self.data.iloc[self.current_step] if not done else None\n        return tuple(next_state) if next_state is not None else None, reward, done\n\n\n# Define the Q-learning agent\nclass QLearningAgent:\n    def __init__(self, state_size, action_size, learning_rate=0.1, discount_factor=0.9, epsilon=0.1):\n        self.q_table = defaultdict(lambda: np.zeros(action_size))\n        self.learning_rate = learning_rate\n        self.discount_factor = discount_factor\n        self.epsilon = epsilon\n        self.action_size = action_size\n        \n    def choose_action(self, state):\n        if np.random.rand() < self.epsilon:\n            return np.random.choice(self.action_size)\n        else:\n            return np.argmax(self.q_table[state])\n    \n    def update(self, state, action, reward, next_state):\n        if next_state is None:\n            td_target = reward\n        else:\n            td_target = reward + self.discount_factor * np.max(self.q_table[next_state])\n        td_error = td_target - self.q_table[state][action]\n        self.q_table[state][action] += self.learning_rate * td_error\n        \n    def train(self, env, episodes):\n        for episode in range(episodes):\n            state = tuple(env.data.iloc[episode])\n            env.reset()\n            done = False\n            while not done:\n                action = self.choose_action(state)\n                next_state, reward, done = env.step(action)\n                self.update(state, action, reward, next_state)\n                state = next_state\n\n                \ntrain_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\n\n# Initialize environment and agent\ntrain_env = SensorEnvironment(train_data)\nagent = QLearningAgent(state_size=len(data.columns) - 1, action_size=2)  # Excluding the 'IsFaulty' column\n\n# Test the agent\ntest_env = SensorEnvironment(test_data)\ntest_env.reset()\ntotal_reward = 0\npredictions = []\nrewards = []  # Track rewards over time\nfor _ in range(len(test_data)):\n    state = test_env.data.iloc[_]\n    action = agent.choose_action(tuple(state))\n    next_state, reward, done = test_env.step(action)\n    total_reward += reward\n    rewards.append(total_reward)  # Track cumulative reward\n    # Map action to 'IsFaulty' label (0 or 1)\n    predicted_label = 1 if action == 1 else 0\n    predictions.append(predicted_label)\n\n# Calculate performance measures\naccuracy = accuracy_score(test_data['IsFaulty'], predictions)\nprecision = precision_score(test_data['IsFaulty'], predictions)\n\nprint(\"Total reward on test data:\", total_reward)\nprint(\"Accuracy:\", accuracy)\nprint(\"Precision:\", precision)\n\n# Plot performance graph\nplt.plot(range(len(rewards)), rewards)\nplt.xlabel('Time Step')\nplt.ylabel('Cumulative Reward')\nplt.title('Testing Performance')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:37:13.50785Z","iopub.execute_input":"2024-06-20T14:37:13.508223Z","iopub.status.idle":"2024-06-20T14:37:13.820476Z","shell.execute_reply.started":"2024-06-20T14:37:13.508192Z","shell.execute_reply":"2024-06-20T14:37:13.819482Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"Total reward on test data: -24\nAccuracy: 0.8\nPrecision: 0.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the environment class\nclass SensorEnvironment:\n    def __init__(self, data):\n        self.data = data\n        self.state = None\n        self.current_step = 0\n        self.max_steps = len(data)\n    \n    def reset(self):\n        self.current_step = 0\n        \n    def step(self, action):\n        # Execute the action\n        is_faulty = self.data.iloc[self.current_step]['IsFaulty']\n        reward = 1 if action == is_faulty else 0\n        self.current_step += 1\n        done = self.current_step >= self.max_steps\n        next_state = self.data.iloc[self.current_step] if not done else None\n        return tuple(next_state) if next_state is not None else None, reward, done\n\n\n# Define the Q-learning agent\nclass QLearningAgent:\n    def __init__(self, state_size, action_size, learning_rate=0.1, discount_factor=0.9, epsilon=0.1):\n        self.q_table = defaultdict(lambda: np.zeros(action_size))\n        self.learning_rate = learning_rate\n        self.discount_factor = discount_factor\n        self.epsilon = epsilon\n        self.action_size = action_size\n        \n    def choose_action(self, state):\n        if np.random.rand() < self.epsilon:\n            return np.random.choice(self.action_size)\n        else:\n            return np.argmax(self.q_table[state])\n    \n    def update(self, state, action, reward, next_state):\n        if next_state is None:\n            td_target = reward\n        else:\n            td_target = reward + self.discount_factor * np.max(self.q_table[next_state])\n        td_error = td_target - self.q_table[state][action]\n        self.q_table[state][action] += self.learning_rate * td_error\n        \n    def train(self, env, episodes):\n        for episode in range(episodes):\n            state = tuple(env.data.iloc[episode])\n            env.reset()\n            done = False\n            while not done:\n                action = self.choose_action(state)\n                next_state, reward, done = env.step(action)\n                self.update(state, action, reward, next_state)\n                state = next_state\n\n\n# Perform label encoding for 'SensorType'\nlabel_encoder = LabelEncoder()\ndata['SensorType'] = label_encoder.fit_transform(data['SensorType'])\n\n# Split data into train and test sets\ntrain_data, test_data = train_test_split(data, test_size=0.3, random_state=42)\n\n# Initialize environment and agent\ntrain_env = SensorEnvironment(train_data)\nagent = QLearningAgent(state_size=len(data.columns) - 1, action_size=2)  # Excluding the 'IsFaulty' column\n\n# Test the agent\ntest_env = SensorEnvironment(test_data)\ntest_env.reset()\ntotal_reward = 0\npredictions = []\nfor _ in range(len(test_data)):\n    state = test_env.data.iloc[_]\n    action = agent.choose_action(tuple(state))\n    next_state, reward, done = test_env.step(action)\n    total_reward += reward\n    # Map action to 'IsFaulty' label (0 or 1)\n    predicted_label = 1 if action == 1 else 0\n    predictions.append(predicted_label)\n\n# Calculate performance measures\naccuracy = accuracy_score(test_data['IsFaulty'], predictions)\nprecision = precision_score(test_data['IsFaulty'], predictions)\n\nprint(\"Total reward on test data:\", total_reward)\nprint(\"Accuracy:\", accuracy)\nprint(\"Precision:\", precision)\n\n# Plot confusion matrix\nconf_matrix = confusion_matrix(test_data['IsFaulty'], predictions)\nsns.heatmap(conf_matrix, annot=True, cmap=\"YlGnBu\", fmt=\"d\", xticklabels=['Normal', 'Faulty'], yticklabels=['Normal', 'Faulty'])\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:37:29.531117Z","iopub.execute_input":"2024-06-20T14:37:29.531515Z","iopub.status.idle":"2024-06-20T14:37:30.074361Z","shell.execute_reply.started":"2024-06-20T14:37:29.531486Z","shell.execute_reply":"2024-06-20T14:37:30.073479Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Total reward on test data: 23\nAccuracy: 0.7666666666666667\nPrecision: 0.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import defaultdict\n\n# Define the environment class\nclass SensorEnvironment:\n    def __init__(self, data):\n        self.data = data\n        self.state = None\n        self.current_step = 0\n        self.max_steps = len(data)\n    \n    def reset(self):\n        self.current_step = 0\n        \n    def step(self, action):\n        # Execute the action\n        is_faulty = self.data.iloc[self.current_step]['IsFaulty']\n        reward = 1 if action == is_faulty else -10\n        self.current_step += 1\n        done = self.current_step >= self.max_steps\n        next_state = self.data.iloc[self.current_step] if not done else None\n        return tuple(next_state) if next_state is not None else None, reward, done\n\n\n# Define the Q-learning agent\nclass QLearningAgent:\n    def __init__(self, state_size, action_size, learning_rate=0.1, discount_factor=0.9, epsilon=0.1):\n        self.q_table = defaultdict(lambda: np.zeros(action_size))\n        self.learning_rate = learning_rate\n        self.discount_factor = discount_factor\n        self.epsilon = epsilon\n        self.action_size = action_size\n        self.train_loss = []\n        self.test_loss = []\n        \n    def choose_action(self, state):\n        if np.random.rand() < self.epsilon:\n            return np.random.choice(self.action_size)\n        else:\n            return np.argmax(self.q_table[state])\n    \n    def update(self, state, action, reward, next_state):\n        if next_state is None:\n            td_target = reward\n        else:\n            td_target = reward + self.discount_factor * np.max(self.q_table[next_state])\n        td_error = td_target - self.q_table[state][action]\n        self.q_table[state][action] += self.learning_rate * td_error\n        self.train_loss.append(td_error ** 2)  # MSE loss\n        \n    def train(self, env, episodes):\n        for episode in range(episodes):\n            state = tuple(env.data.iloc[episode])\n            env.reset()\n            done = False\n            while not done:\n                action = self.choose_action(state)\n                next_state, reward, done = env.step(action)\n                self.update(state, action, reward, next_state)\n                state = next_state\n\n\n# Perform label encoding for 'SensorType'\nlabel_encoder = LabelEncoder()\ndata['SensorType'] = label_encoder.fit_transform(data['SensorType'])\n\n# Split data into train and test sets\ntrain_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\n\n# Initialize environment and agent\ntrain_env = SensorEnvironment(train_data)\nagent = QLearningAgent(state_size=len(data.columns) - 1, action_size=2)  # Excluding the 'IsFaulty' column\n\n# Train the agent\nepisodes = min(1000, len(train_data))  # Define the number of training episodes, ensuring it doesn't exceed the length of the training data\nagent.train(train_env, episodes)\n\n# Print train loss\nprint(\"Train Loss:\", np.mean(agent.train_loss))\n\n# Test the agent\ntest_env = SensorEnvironment(test_data)\ntest_env.reset()\ntotal_reward = 0\npredictions = []\nfor _ in range(len(test_data)):\n    state = tuple(test_env.data.iloc[_])  # Convert state to tuple\n    action = agent.choose_action(state)\n    next_state, reward, done = test_env.step(action)\n    total_reward += reward\n    # Map action to 'IsFaulty' label (0 or 1)\n    predicted_label = 1 if action == 1 else 0\n    predictions.append(predicted_label)\n    # Calculate test loss\n    if next_state is not None:\n        td_target = reward\n        td_error = td_target - agent.q_table[state][action]\n        agent.test_loss.append(td_error ** 2)  # MSE loss\n\n# Print test loss\nprint(\"Test Loss:\", np.mean(agent.test_loss))\n\n# Calculate performance measures\naccuracy = accuracy_score(test_data['IsFaulty'], predictions)\nprecision = precision_score(test_data['IsFaulty'], predictions)\n\nprint(\"Total reward on test data:\", total_reward)\nprint(\"Accuracy:\", accuracy)\nprint(\"Precision:\", precision)\n\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# Generate confusion matrix\nconf_matrix = confusion_matrix(test_data['IsFaulty'], predictions)\nsns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='g')\nplt.xlabel('Predicted labels')\nplt.ylabel('True labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:38:49.295719Z","iopub.execute_input":"2024-06-20T14:38:49.296074Z","iopub.status.idle":"2024-06-20T14:38:50.789871Z","shell.execute_reply.started":"2024-06-20T14:38:49.296047Z","shell.execute_reply":"2024-06-20T14:38:50.788974Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Train Loss: 3.198339328430623\nTest Loss: 21.842105263157894\nTotal reward on test data: -24\nAccuracy: 0.8\nPrecision: 0.0\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import ParameterGrid\n\n# Define hyperparameters to tune\nhyperparameters = {\n    'learning_rate': [0.1, 0.01, 0.001],\n    'discount_factor': [0.9, 0.95, 0.99],\n    'epsilon': [0.1, 0.05, 0.01]\n}\n\n# Generate combinations of hyperparameters\nparam_grid = ParameterGrid(hyperparameters)\n\nbest_performance = float('-inf')\nbest_hyperparameters = None\n\n# Train and validate for each hyperparameter combination\nfor params in param_grid:\n    agent = QLearningAgent(state_size=len(data.columns) - 1, action_size=2, **params)\n    agent.train(train_env, episodes)  # Training on the full training data for simplicity\n    test_env.reset()\n    total_reward = 0\n    predictions = []\n    for _ in range(len(test_data)):\n        state = tuple(test_env.data.iloc[_])  # Convert state to tuple\n        action = agent.choose_action(state)\n        next_state, reward, done = test_env.step(action)\n        total_reward += reward\n        predicted_label = 1 if action == 1 else 0\n        predictions.append(predicted_label)\n    accuracy = accuracy_score(test_data['IsFaulty'], predictions)\n    if accuracy > best_performance:\n        best_performance = accuracy\n        best_hyperparameters = params\n\nprint(\"Best Hyperparameters:\", best_hyperparameters)\nprint(\"Best Accuracy:\", best_performance)","metadata":{"execution":{"iopub.status.busy":"2024-06-20T14:39:01.777738Z","iopub.execute_input":"2024-06-20T14:39:01.778078Z","iopub.status.idle":"2024-06-20T14:39:29.33167Z","shell.execute_reply.started":"2024-06-20T14:39:01.778052Z","shell.execute_reply":"2024-06-20T14:39:29.330785Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Best Hyperparameters: {'discount_factor': 0.95, 'epsilon': 0.01, 'learning_rate': 0.1}\nBest Accuracy: 0.85\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}